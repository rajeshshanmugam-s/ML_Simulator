{"version":3,"sources":["components/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","data","Mockdata","labels","Object","entries","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","values","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","min","FactorRange","index","max","step","value","onChange","type","e","target","App","useState","factors","setFactors","chart","setChart","useEffect","gotFactors","map","factor","range","updateFactor","newValue","newfactors","i","handleSubmit","fetch","queryObj","length","key","factor_name","keys","join","convertToQueryParams","then","res","json","result","Container","Row","Col","Button","onClick","interval","parseInt","idx","option","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.732d0dee.chunk.js","sourcesContent":["import React from 'react';\nimport {Bar} from 'react-chartjs-2';\n\nfunction BarChart({ data }) {\n  const Mockdata = {\n    labels: Object.entries(data) ,\n    datasets: [\n      {\n        label: 'Bagging Classification',\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: Object.values(data)\n      }\n    ]\n  };\n\n  // var chartOptions = {\n  //   showScale: true,\n  //   pointDot: true,\n  //   showLines: false,\n\n  //   title: {\n  //       display: true,\n  //       text: 'Chart.js Bar Chart'\n  //   },\n\n  //   legend: {\n  //       display: true,\n  //       labels: {\n  //           boxWidth: 50,\n  //           fontSize: 10,\n  //           fontColor: '#bbb',\n  //           padding: 5,\n  //       }\n  //   },\n\n  //   scales: {\n  //     yAxes: [{\n  //         ticks: {\n  //             beginAtZero:true,\n  //             min: 0,\n  //             max: 100    \n  //         }\n  //       }]\n  //    }\n  // }\n\n  return (\n    <Bar\n      data={Mockdata}\n      // width={100}\n      // height={50}\n      options={{\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero:true,\n              min: 0\n            }\n          }]\n        }\n      }}\n    />\n  )\n}\n\nexport default BarChart;","import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './App.css';\nimport BarChart from './components/BarChart';\n\nfunction FactorRange({ index, min, max, step, value, onChange }) {\n  return(\n    <div>\n      <input type=\"range\"\n        value={value}\n        min={min}\n        max={max}\n        step={step}\n        onChange={ e => onChange(e.target.value, index) }\n      />\n\n      <p>{value}</p>\n    </div>\n  )\n}\n\nfunction App() {\n  const [ factors, setFactors ] = useState([])\n  const [ chart, setChart ] = useState({})\n\n  useEffect(() => {\n    let gotFactors = [\n      {\"factor_name\": \"Sex\", \"range\": [\"male\", \"female\"], \"interval\": null, \"type\": \"categorical\"},\n      {\"factor_name\": \"Housing\", \"range\": [\"own\", \"free\", \"rent\"], \"interval\": null, \"type\": \"categorical\"},\n      {\"factor_name\": \"Savings accounts\", \"range\": [\"no_inf\", \"little\", \"quite rich\", \"rich\", \"moderate\"], \"interval\": null, \"type\": \"categorical\"},\n      {\"factor_name\": \"Checking account\", \"range\": [\"little\", \"moderate\", \"no_inf\", \"rich\"], \"interval\": null, \"type\": \"categorical\"},\n      {\"factor_name\": \"Purpose\", \"range\": [\"radio/TV\", \"education\", \"furniture/equipment\", \"car\", \"business\", \"domestic appliances\", \"repairs\", \"vacation/others\"], \"interval\": null, \"type\": \"categorical\"},\n      {\"factor_name\": \"Job\", \"range\": [\"unskilled and non-resident\", \"unskilled and resident\", \"skilled\", \"highly skilled\"], \"interval\": null, \"type\": \"categorical\"},\n      {\"factor_name\": \"Credit amount\", \"range\": [250, 18424], \"interval\": 0.5, \"type\": \"continous\"},\n      {\"factor_name\": \"Age\", \"range\": [19, 75], \"interval\": 1, \"type\": \"categorical\"},\n      {\"factor_name\": \"Duration in Months\", \"range\": [4, 72], \"interval\": 1, \"type\": \"categorical\"}\n    ]\n\n    // The response data doesn't have \"value\"\n    // key so using map function to create a key and \n    // setting the initial value from range first index\n    gotFactors = gotFactors.map((factor) => {\n      factor['value'] = factor.range[0]\n      return factor\n    })  \n\n    setFactors(gotFactors)\n\n  }, [])\n\n  const updateFactor = (newValue, index) => {\n    const newfactors = factors.map((factor, i) => {\n      if(i  === index) {\n        factor.value = newValue\n      }\n      return factor\n    })\n\n    setFactors(newfactors)\n  }\n\n  const convertToQueryParams = (factors) => {\n    var queryObj = {}\n    for(var i = 0; i < factors.length; i++) {\n      for(var key in factors[i]) {\n        queryObj[factors[i].factor_name] = factors[i].value\n      }\n    }\n\n    return Object.keys(queryObj).map(key => `${key}=${queryObj[key]}`).join('&')\n  }\n\n  const handleSubmit = () => {\n      fetch(\"/predict?\"+convertToQueryParams(factors))\n        .then(res => res.json()).then(result => {\n          \n          setChart(result)\n        })\n  }\n\n  // const data = [\n  //   {xAxis: 'Good', yAxis: 0.3},\n  //   {xAxis: 'Bad', yAxis: 0.9}\n  // ];\n  \n  return (\n    <div>\n      <Container>\n      <Row>\n        <Col>\n          <Button onClick={ () => handleSubmit() } >Check</Button>\n\n          {\n            factors.map((factor, index) => {\n              return (\n                <div key={index}>\n                  <h5>{factor.factor_name}</h5>\n                  {\n                    factor.interval != null ? (\n                      <FactorRange\n                        index={index}\n                        min={factor.range[0]}\n                        max={factor.range[1]}\n                        step={factor.interval}\n                        value={parseInt(factor.value)}\n                        onChange={ updateFactor }\n                      >\n                      </FactorRange>\n                    ) : (\n                      <select value={factor.value} onChange={ (e) => updateFactor(e.target.value, index) }>\n                        {\n                          factor.range.map((range, idx) => {\n                            return (\n                            <option key={idx} option={range} >{range}</option>\n                            )\n                          })\n                        }\n                      </select>\n                    )\n                  }\n                </div>\n              )\n            })\n          }\n          <Button onClick={ () => handleSubmit() } >Check</Button>\n        </Col>\n        <Col>\n          <BarChart data={chart} />\n        </Col>\n      </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}